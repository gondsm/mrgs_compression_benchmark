%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/santos/Desktop/mrgs_compression_benchmark/matlab/results.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB
filename = 'intel_aces_killian_100.csv';
delimiter = ',';
startRow = 2;

formatSpec = '%s%s%f%f%f%f%f%f%f%[^\n\r]';

fileID = fopen(filename,'r');

dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

fclose(fileID);

technique_name = dataArray{:, 1};
dataset_name = dataArray{:, 2};
dataset_size = dataArray{:, 3};
num_iterations = dataArray{:, 4};
ratio = dataArray{:, 5};
average_compression_time_ms = dataArray{:, 6};
std_compression_time_ms = dataArray{:, 7};
average_decompression_time_ms = dataArray{:, 8};
std_decompression_time_ms = dataArray{:, 9};

% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Determine dataset ranges and number
i = 0;
ranges = 0;
while i < length(dataset_name)-1 && length(ranges) < 5
    if i == 0
        while strcmp(dataset_name(i+1), dataset_name(1))
            i = i+1;
        end
        ranges(end+1) = i;
    else
        while(strcmp(dataset_name(i+1), dataset_name(ranges(end)+1)) && i < length(dataset_name)-1)
            i = i+1;
        end
        ranges(end+1) = i;
    end
end
ranges(end) = ranges(end)+1;


% The number of datasets is now easy to determine
num_datasets = length(ranges)-1

%% Create bar graph
% Concatenate results into one big cozy matrix
Y = [];
dataset_name_array = {};
for i = 1:num_datasets
    Y = cat(2, Y, ratio(ranges(i)+1:ranges(i+1))./average_compression_time_ms(ranges(i)+1:ranges(i+1)));
    dataset_name_array(end+1) = dataset_name(ranges(i+1));
end

% Create graph
figure();
handles = bar3(gca, [1:ranges(2)], Y);
title('Compression ratio achieved per millissecond of compression time');
set(gca,'Xtick',[1:ranges(2)],'YTickLabel',technique_name([1:ranges(2)]), 'XTickLabel', dataset_name_array)

%% Bar graphs
temp = dataset_name;
names = {};
while length(temp) > 0
    names{end+1} = temp{i};
    temp(strcmp(temp, temp{i})) = [];
end
clear temp;
indices = {};
for i = 1:length(names)
    indices{i} = strcmp(dataset_name, names{i});
end

temporal_efficiency = ratio ./ (average_compression_time_ms + average_decompression_time_ms);

% LZ4
indices_lz4 = strcmp(technique_name, 'LZ4') | strcmp(technique_name, 'LZ4 HC');
figure();
subplot(2,1,1)
Y_lz4 = [];
for i = 1:length(names)
    Y_lz4 = cat(2, Y_lz4,  temporal_efficiency(indices_lz4 & indices{i}));
end
bar3([1:2], Y_lz4)
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'LZ4', 'LZ4 HC'}, 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');
subplot(2,1,2)
Y_lz4_r = [];
for i = 1:length(names)
    Y_lz4_r = cat(2, Y_lz4_r,  ratio(indices_lz4 & indices{i}));
end
bar3([1:2], Y_lz4_r)
title('Total compression ratio achieved');
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'LZ4', 'LZ4 HC'}, 'XTickLabel', names)

% DEFLATE
indices_deflate = strcmp(technique_name, 'DEFLATE (zlib)') | strcmp(technique_name, 'DEFLATE (zlib) Slow') | strcmp(technique_name, 'DEFLATE (zlib) Fast');
figure();
Y_deflate = [];
for i = 1:length(names)
    Y_deflate = cat(2, Y_deflate,  temporal_efficiency(indices_deflate & indices{i}));
end
bar3([1:3], Y_deflate)
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'DEFLATE (zlib)', 'DEFLATE (zlib) Fast', 'DEFLATE (zlib) Slow'}, 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');

% LZMA
indices_lzma = strcmp(technique_name, 'LZMA') | strcmp(technique_name, 'LZMA Slow') | strcmp(technique_name, 'LZMA Fast');
figure();
Y_lzma = [];
for i = 1:length(names)
    Y_lzma = cat(2, Y_lzma,  temporal_efficiency(indices_lzma & indices{i}));
end
bar3([1:3], Y_lzma)
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'LZMA', 'LZMA Fast', 'LZMA Slow'}, 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');

% QuickLZ
indices_quicklz = strcmp(technique_name, 'QuickLZ');
figure();
Y_quicklz = [];
for i = 1:length(names)
    Y_quicklz = cat(2, Y_quicklz,  temporal_efficiency(indices_quicklz & indices{i}));
end
bar([1:length(names)],Y_quicklz)
set(gca,'Xtick',[1:length(names)], 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');
