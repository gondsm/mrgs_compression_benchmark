%% This code was authored by Gon√ßalo Martins, and is hereby put in public domain.

%% Import data from text file.
% Auto-generated by MATLAB
%filename = 'intel_aces_killian_100.csv';
%filename = 'intel_aces_1000.csv';
filename = 'final_100.csv';
delimiter = ',';
startRow = 2;

formatSpec = '%s%s%f%f%f%f%f%f%f%[^\n\r]';

fileID = fopen(filename,'r');

dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

fclose(fileID);

technique_name = dataArray{:, 1};
dataset_name = dataArray{:, 2};
dataset_size = dataArray{:, 3};
num_iterations = dataArray{:, 4};
ratio = dataArray{:, 5};
average_compression_time_ms = dataArray{:, 6};
std_compression_time_ms = dataArray{:, 7};
average_decompression_time_ms = dataArray{:, 8};
std_decompression_time_ms = dataArray{:, 9};

% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Determine dataset ranges and number
i = 0;
ranges = 0;
while i < length(dataset_name)-1 && length(ranges) < 5
    if i == 0
        while strcmp(dataset_name(i+1), dataset_name(1))
            i = i+1;
        end
        ranges(end+1) = i;
    else
        while(strcmp(dataset_name(i+1), dataset_name(ranges(end)+1)) && i < length(dataset_name)-1)
            i = i+1;
        end
        ranges(end+1) = i;
    end
end
ranges(end) = ranges(end)+1;


% The number of datasets is now easy to determine
num_datasets = length(ranges)-1

%% Create bar graph
% Concatenate results into one big cozy matrix
Y = [];
dataset_name_array = {};
for i = 1:num_datasets
    Y = cat(2, Y, ratio(ranges(i)+1:ranges(i+1))./average_compression_time_ms(ranges(i)+1:ranges(i+1)));
    dataset_name_array(end+1) = dataset_name(ranges(i+1));
end

% Create graph
figure();
handles = bar3(gca, [1:ranges(2)], Y);
title('Compression ratio achieved per millissecond of compression time');
set(gca,'Xtick',[1:ranges(2)],'YTickLabel',technique_name([1:ranges(2)]), 'XTickLabel', dataset_name_array)

%% Bar graphs
temp = dataset_name;
names = {};
while length(temp) > 0
    names{end+1} = temp{i};
    temp(strcmp(temp, temp{i})) = [];
end
clear temp;
indices = {};
for i = 1:length(names)
    indices{i} = strcmp(dataset_name, names{i});
end

temporal_efficiency = ratio ./ (average_compression_time_ms + average_decompression_time_ms);

% All
figure();


% LZ4
indices_lz4 = strcmp(technique_name, 'LZ4') | strcmp(technique_name, 'LZ4 HC');
figure();
subplot(2,1,1)
Y_lz4 = [];
for i = 1:length(names)
    Y_lz4 = cat(2, Y_lz4,  temporal_efficiency(indices_lz4 & indices{i}));
end
bar3([1:2], Y_lz4)
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'LZ4', 'LZ4 HC'}, 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');
subplot(2,1,2)
Y_lz4_r = [];
for i = 1:length(names)
    Y_lz4_r = cat(2, Y_lz4_r,  ratio(indices_lz4 & indices{i}));
end
bar3([1:2], Y_lz4_r)
title('Total compression ratio achieved');
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'LZ4', 'LZ4 HC'}, 'XTickLabel', names)

% DEFLATE
indices_deflate = strcmp(technique_name, 'DEFLATE (zlib)') | strcmp(technique_name, 'DEFLATE (zlib) Slow') | strcmp(technique_name, 'DEFLATE (zlib) Fast');
figure();
Y_deflate = [];
for i = 1:length(names)
    Y_deflate = cat(2, Y_deflate,  temporal_efficiency(indices_deflate & indices{i}));
end
bar3([1:3], Y_deflate)
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'DEFLATE (zlib)', 'DEFLATE (zlib) Fast', 'DEFLATE (zlib) Slow'}, 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');

% LZMA
indices_lzma = strcmp(technique_name, 'LZMA') | strcmp(technique_name, 'LZMA Slow') | strcmp(technique_name, 'LZMA Fast');
figure();
Y_lzma = [];
for i = 1:length(names)
    Y_lzma = cat(2, Y_lzma,  temporal_efficiency(indices_lzma & indices{i}));
end
bar3([1:3], Y_lzma)
set(gca,'Xtick',[1:length(names)],'YTickLabel', {'LZMA', 'LZMA Fast', 'LZMA Slow'}, 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');

% QuickLZ
indices_quicklz = strcmp(technique_name, 'QuickLZ');
figure();
Y_quicklz = [];
for i = 1:length(names)
    Y_quicklz = cat(2, Y_quicklz,  temporal_efficiency(indices_quicklz & indices{i}));
end
bar([1:length(names)],Y_quicklz)
set(gca,'Xtick',[1:length(names)], 'XTickLabel', names)
title('Compression ratio achieved per millissecond of compression time');

%% Line plots
tech_names = {'DEFLATE (zlib)', 'DEFLATE (zlib) Slow', 'DEFLATE (zlib) Fast', 'LZMA', 'LZMA Slow', 'LZMA Fast', 'LZ4', 'LZ4 HC', 'QuickLZ'};
%dataset_lengths = [753078, 1280342, 49561658];
markers = {'+','o','x','s','d','^','v','>','<','p','h'};
colors = ['c', 'm', 'r', 'g', 'b', 'k'];
colors = repmat(colors, 1, 2);

% Calculate polynomials
C = {};
C2 = {};
poly = {};
X = linspace(1,num_datasets, 10000);
for i = 1:length(tech_names)
    C{i} = polyfit([1:num_datasets].', temporal_efficiency(strcmp(technique_name, tech_names{i})), num_datasets-1);
    C2{i} = polyfit([1:num_datasets].', ratio(strcmp(technique_name, tech_names{i})), num_datasets-1);
    poly{i} = polyval(C{i}, X);
    poly2{i} = polyval(C2{i}, X);
end

% Plot results
figure('Color', [1 1 1]);
%subplot(2,1,1)
hold all;
for i = 1:length(tech_names)
    h(i) = plot([1:num_datasets], temporal_efficiency(strcmp(technique_name, tech_names{i})), sprintf('%s%s',markers{i}, colors(i)), 'markers', 10, 'linewidth', 1);
    h1(i) = plot(X, poly{i}, colors(i), 'linewidth', 2);
end
%legend(h, tech_names)
set(gca, 'yscale', 'log') 
%grid;
set(gca,'Xtick',[1:length(names)], 'XTickLabel', names)
%title('Temporal Efficiency');
ylabel('Temporal Efficiency')
xlabel('Dataset')
%export_fig efficiency.eps -eps

figure('Color', [1 1 1]);
%subplot(2,1,2)
hold all;
for i = 1:length(tech_names)
    h(i) = plot([1:num_datasets], ratio(strcmp(technique_name, tech_names{i})), sprintf('%s%s',markers{i}, colors(i)), 'markers', 10, 'linewidth', 1);
    h1(i) = plot(X, poly2{i}, colors(i), 'linewidth', 2);
end
%grid;
legend(h, tech_names, 'Location', 'NorthWest')
set(gca,'Xtick',[1:length(names)], 'XTickLabel', names)
ylabel('Compression ratio achieved');
xlabel('Dataset')
xlabel('Dataset')
%export_fig ratio.eps -eps

%% Average bar graphs
clear avg_E avg_R
%avg_E = zeros(length(tech_names));
for i = 1:length(tech_names)
    avg_E(i) = mean(temporal_efficiency(strcmp(technique_name, tech_names{i})));
    avg_R(i) = mean(ratio(strcmp(technique_name, tech_names{i})));
end

figure('Color', [1 1 1]);
bar3(avg_E)
set(gca,'Ytick',[1:length(tech_names)], 'YTickLabel', tech_names)
zlabel('Mean Temporal Efficiency')
export_fig mean_efficiency.eps -eps

figure('Color', [1 1 1]);
bar3(avg_R)
set(gca,'Ytick',[1:length(tech_names)], 'YTickLabel', tech_names)
zlabel('Mean Compression Ratio')
export_fig mean_ratio.eps -eps
