%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/santos/Desktop/mrgs_compression_benchmark/matlab/results.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB

% Initialize variables.
%filename = '/home/santos/Desktop/mrgs_compression_benchmark/matlab/results.csv';
filename = 'results.csv';
delimiter = ',';
startRow = 2;

% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%f%f%f%f%f%f%f%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

% Close the text file.
fclose(fileID);

% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

% Allocate imported array to column variable names
technique_name = dataArray{:, 1};
dataset_name = dataArray{:, 2};
dataset_size = dataArray{:, 3};
num_iterations = dataArray{:, 4};
ratio = dataArray{:, 5};
average_compression_time_ms = dataArray{:, 6};
std_compression_time_ms = dataArray{:, 7};
average_decompression_time_ms = dataArray{:, 8};
std_decompression_time_ms = dataArray{:, 9};

% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Determine dataset ranges and number
i = 0;
ranges = 0;
while i < length(dataset_name)-1 && length(ranges) < 5
    if i == 0
        while strcmp(dataset_name(i+1), dataset_name(1))
            i = i+1;
        end
        ranges(end+1) = i;
    else
        while(strcmp(dataset_name(i+1), dataset_name(ranges(end)+1)) && i < length(dataset_name)-1)
            i = i+1;
        end
        ranges(end+1) = i;
    end
end
ranges(end) = ranges(end)+1;


% The number of datasets is now easy to determine
num_datasets = length(ranges)-1

%% Create bar graph
% Concatenate results into one big cozy matrix
Y = [];
dataset_name_array = {};
for i = 1:num_datasets
    fprintf('AQUI?')
    Y = cat(2, Y, ratio(ranges(i)+1:ranges(i+1))./average_compression_time_ms(ranges(i)+1:ranges(i+1)));
    dataset_name_array(end+1) = dataset_name(ranges(i+1));
end

% Create graph
figure();
%set(gca,'ZScale','log') WE NEED LOG SCALE ON Z AXIS FOR DATA TO BE
%VIEWABLE!
bar3(gca, [1:ranges(2)], Y)
title('Compression ratio achieved per millissecond of compression time');
set(gca,'Xtick',[1:ranges(2)],'YTickLabel',technique_name([1:ranges(2)]), 'XTickLabel', dataset_name_array)